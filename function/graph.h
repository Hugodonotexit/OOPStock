#ifndef GRAPH_H
#define GRAPH_H

#include <SFML/Graphics.hpp>
#include <vector>
#include <algorithm>

#define GRAPH_POS_X 400
#define GRAPH_POS_Y 300
#define GRAPH_WIDTH 1400
#define GRAPH_HEIGHT 700

class Graph
{
private:
    std::vector<float> assetPrices = {11, 17, 37, 52, 71, 110, 119, 122, 137, 161, 179, 219, 222, 232, 246, 303, 376, 395, 879, 416, 424, 446, 462, 467, 469, 484, 511, 520, 529, 641, 651, 652, 676, 702, 715, 744, 749, 751, 792, 803, 812, 830, 836, 841, 860, 868, 940, 944, 966, 972, 1023, 1028, 1049, 1052, 1053, 1083, 1122, 1136, 1200, 1207, 1239, 1253, 1285, 1303, 1308, 1312, 1332, 1352, 1369, 1409, 1439, 1464, 1476, 1484, 1501, 1510, 1558, 1568, 1583, 1585, 1638, 1650, 1665, 1667, 1738, 1755, 1804, 1835, 1844, 1849, 1865, 1887, 1973, 2002, 2003, 2017, 2094, 2095, 2104, 2107, 2167, 2175, 2206, 2293, 2316, 2352, 2354, 2361, 2382, 2392, 2396, 2448, 2455, 2458, 2472, 2509, 2518, 2521, 2537, 2572, 2589, 2597, 2614, 2623, 2686, 2724, 2734, 4589, 2771, 2774, 2776, 2777, 2785, 2810, 2857, 2877, 2885, 2890, 2910, 2950, 2979, 3036, 3039, 3062, 3099, 3102, 3118, 3119, 3125, 3152, 3201, 3228, 3229, 3285, 3287, 3319, 3354, 3385, 3391, 3417, 3421, 3428, 3431, 3435, 3462, 3489, 3512, 3517, 3518, 3539, 3541, 967, 3582, 3600, 3626, 3630, 3631, 3646, 3664, 3689, 3699, 3700, 3702, 3714, 3730, 3734, 3745, 3759, 3764, 3782, 3818, 3835, 3853, 3855, 3873, 3886, 3897, 3920, 3921, 3931, 3945, 3950, 3958, 3982, 3984, 4060, 4072, 4085, 4086, 4112, 4138, 4141, 4155, 4177, 4202, 4225, 4248, 4261, 4283, 4303, 4339, 4344, 4390, 4392, 4431, 4480, 4493, 4499, 4509, 4529, 4542, 4545, 4552, 4560, 4568, 4569, 68, 4669, 4678, 4680, 4703, 4715, 4750, 4803, 4818, 4821, 4865, 4909, 4926, 4951, 4980, 4985, 5024, 5038, 5048, 5053, 5083, 5102, 5108, 5149, 5175, 5177, 5195, 5205, 5218, 5226, 5231, 5237, 5259, 5284, 5313, 5345, 5354, 5382, 5411, 5438, 5441, 5507, 5508, 5538, 5550, 5557, 5566, 5570, 5598, 5633, 5644, 5654, 5666, 5673, 5689, 5723, 5733, 5765, 5804, 5872, 5904, 5925, 5951, 5979, 6021, 6024, 6069, 6095, 6101, 6103, 6109, 6122, 6123, 6130, 6167, 6188, 6190, 6235, 6259, 6280, 6339, 6357, 6363, 6380, 6400, 6437, 6463, 6506, 6512, 6524, 6556, 6601, 6645, 6674, 6680, 6766, 6810, 6823, 6844, 6849, 6851, 6855, 6864, 6878, 6882, 6890, 6930, 7044, 7050, 7070, 7078, 7097, 7102, 7116, 7118, 7122, 7159, 7178, 7241, 7263, 7308, 7357, 7369, 7404, 7419, 7427, 7435, 7440, 7443, 7451, 7477, 7492, 7498, 7511, 7514, 7520, 7527, 7581, 7604, 7607, 7623, 7634, 7644, 7646, 7661, 7662, 7667, 7685, 7718, 7725, 7890, 7891, 7893, 7895, 7911, 7922, 7951, 7954, 7968, 7980, 8017, 8027, 8052, 8065, 8080, 8084, 8134, 8136, 8154, 8174, 8186, 8198, 8205, 8227, 8233, 8246, 8321, 8335, 8337, 8406, 8414, 8437, 8440, 8445, 8477, 8488, 8506, 8623, 8646, 8678, 8682, 8685, 8703, 8708, 8759, 8765, 8805, 8832, 8869, 8934, 8936, 8945, 8946, 8970, 9069, 9080, 9127, 9135, 9140, 9153, 9178, 9248, 9250, 9279, 9298, 9304, 9327, 9328, 9329, 9341, 9349, 9351, 9354, 9359, 9381, 9419, 9456, 9466, 9491, 9493, 9495, 9507, 9556, 9558, 9569, 9587, 9609, 9612, 9619, 9622, 9642, 9650, 9658, 9668, 9697, 9710, 9754, 9759, 9764, 9790, 9798, 9821, 9835, 9843, 9848, 9854, 9865, 9871, 9876, 9898, 9933, 9978, 9986, 9989};
    double maxPriceRange, minPriceRange, priceRange, scale_y;
    int maxRange_x = this->assetPrices.size();
    int minRange_x = 0;
    sf::VertexArray lines;

    void calculatePriceRange();
    
public:
    Graph(float);
    void setmaxRange_x(int);
    int getmaxRange_x();
    void setminRange_x(int);
    int getminRange_x();
    void setminmaxRange_x(int, int);
    void updatGraphPrice(float);
    sf::VertexArray getLines();
    void updateLines();
    ~Graph();
};

#endif